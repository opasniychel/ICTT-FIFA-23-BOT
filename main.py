import asyncio
import os
import aiogram
import sqlite3
import config
import random
from matplotlib import pyplot as plt
import json
import datetime
from colorama import Fore, init
bot = aiogram.bot.Bot(config.BOT_TOKEN, )
dp = aiogram.Dispatcher(bot)
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç
cards = os.listdir('Cards')

# –í—ã–±–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä–¥
def get_random_cards(pack_size):
    random_cards = []
    for x in range(pack_size):
        random_card = random.choice(cards)
        random_cards.append(random_card)
    return random_cards

def is_new_user(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    cursor.execute("SELECT * FROM data WHERE id=?", (user_id,))
    data = cursor.fetchone()
    if data is None:
        return True
    else:
        return False

def get_all_users():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM data")
    rows = cursor.fetchall()

    users = []
    for row in rows:
        users.append(str(row[0]))

    return users

async def check_subscription(user_id):
    channel = await bot.get_chat(config.CHANNEL_ID)
    channel_name = channel.full_name
    channel_username = channel.username
    user = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
    if not user.status in config.STATUSES:
        await bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏ /start', reply_markup=aiogram.types.InlineKeyboardMarkup(row_width=1).add(aiogram.types.InlineKeyboardButton(text=channel_name, url=f'https://t.me/{channel_username}')))
        return True
    else:
        return False

async def init_bot(dp: aiogram.Dispatcher):
    commands = [aiogram.types.BotCommand('/start', '–ü—Ä–æ—Ñ–∏–ª—å'),
            aiogram.types.BotCommand('/help', '–ü–æ–º–æ—â—å'),
            aiogram.types.BotCommand('/info', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ'),
            aiogram.types.BotCommand('/play', '–ò–≥—Ä–∞—Ç—å –≤ –º–∞—Ç—á–∏ (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: 5000 –º–æ–Ω–µ—Ç)'),
            aiogram.types.BotCommand('/packs', '–ú–µ–Ω—é —Å –ø–∞–∫–∞–º–∏'),
            aiogram.types.BotCommand('/change_info', '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'),
            aiogram.types.BotCommand('/change_avatar', '–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø—Ä–æ—Ñ–∏–ª—è'),
            aiogram.types.BotCommand('/leaderboard', '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')]
    await dp.bot.set_my_commands(commands=commands)

@dp.message_handler(commands=['send'])
async def send_resources(message: aiogram.types.Message):
    if str(message.from_user.id) in config.ADMINS:
        count = 0
        users = get_all_users()
        text = "–û—Ç—á—ë—Ç –æ –æ—Ç–ø–ø—Ä–∞–∫–µ –º–æ–Ω–µ—Ç:\n"
        for user_id in users:
            cursor.execute("SELECT coins, free_packs FROM data WHERE id=?", (user_id,))
            data = cursor.fetchone()
            cursor.execute("UPDATE data SET coins=?, free_packs=? WHERE id=?", (data[0] + 10000, 1, user_id))
            conn.commit()
            try:
                await bot.send_message(user_id, 'üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10.000 –º–æ–Ω–µ—Ç.')
                print(Fore.GREEN + f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {str(user_id)}')
                text += f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {str(user_id)}'
                count += 1
            except Exception as exception:
                print(Fore.RED + f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {str(user_id)}\n'
                                 f'–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {exception}')
                text += f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {str(user_id)}\n–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {exception}'
        print(Fore.CYAN + f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(users)}\n–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count * 7500} –º–æ–Ω–µ—Ç –∏–∑ {len(users) * 7500}')
        text += f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(users)}\n–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count * 7500} –º–æ–Ω–µ—Ç –∏–∑ {len(users) * 7500}'
        await bot.send_message(message.from_user.id, text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: aiogram.types.Message):
    print(f'Go to profile: {message.from_user.id}')
    player_id = message.from_user.id
    msg = await bot.send_message(player_id, '–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫', reply_markup=aiogram.types.ReplyKeyboardRemove())
    await bot.delete_message(player_id, msg.message_id)
    channel = await bot.get_chat(config.CHANNEL_ID)
    channel_name = channel.full_name
    channel_username = channel.username
    if await check_subscription(player_id):
        return
    if is_new_user(player_id):
        cursor.execute("INSERT INTO data (id, coins, opened_packs, cards, info) VALUES (?, 25000, 0, 0, ?)", (player_id, None))
        conn.commit()
        await bot.send_message(player_id, f'–ü—Ä–∏–≤–µ—Ç –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –±–æ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Ç [{channel_name}](https://t.me/{channel_username})\n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–∫—Ä–æ–º–µ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã)\n–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å', parse_mode=aiogram.types.ParseMode.MARKDOWN_V2)
    cursor.execute("SELECT coins, opened_packs, cards, info FROM data WHERE id=?", (player_id,))
    try:
        data = cursor.fetchone()
        coins = data[0]
        opened_packs = data[1]
        cards = len(str(data[2]).split()) if len(str(data[2]).split()) > 1 else 0
        info = data[3] if data[3] is not None else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    except:
        await bot.send_message(player_id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ')
    try:
        with open(f'users_data/avatar_u{player_id}.png', 'rb') as f:
            await bot.send_photo(chat_id=player_id, photo=f, caption=f'–ü—Ä–∏–≤–µ—Ç –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info}\nüí∞ –ú–æ–Ω–µ—Ç - {coins}\nüì¶ –û—Ç–∫—Ä—ã—Ç–æ –ü–∞–∫–æ–≤ - {opened_packs}\nüåê –ö–∞—Ä—Ç - {cards}')
    except FileNotFoundError:
        with open(f'users_data/avatar_is_none.png', 'rb') as f:
            await bot.send_photo(chat_id=player_id, photo=f, caption=f'–ü—Ä–∏–≤–µ—Ç –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{info}\nüí∞ –ú–æ–Ω–µ—Ç - {coins}\nüì¶ –û—Ç–∫—Ä—ã—Ç–æ –ü–∞–∫–æ–≤ - {opened_packs}\nüåê –ö–∞—Ä—Ç - {cards}')

@dp.message_handler(commands=['change_info'])
async def process_callback_change_info(message):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ')
    dp.register_message_handler(process_new_info, content_types=aiogram.types.ContentTypes.TEXT)
async def process_new_info(message: aiogram.types.Message):
    user_id = str(message.from_user.id)
    new_info = str(message.text)
    if len(new_info) > 15:
        await bot.send_message(user_id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤')
        return
    try:
        cursor.execute("UPDATE data SET info=? WHERE id=?", (new_info, user_id))
    except:
        await bot.send_message(user_id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ')
    conn.commit()
    dp.message_handlers.unregister(process_new_info)
    await bot.send_message(user_id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n'
                                    '–ß—Ç–æ–±—ã –µ—ë —É–≤–∏–¥–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /start')
@dp.message_handler(commands=['change_avatar'])
async def process_change_avatar(message):
    if await check_subscription(message.from_user.id):
        return
    user_id = str(message.from_user.id)
    await bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ!!!)')
    dp.register_message_handler(process_new_avatar, content_types=aiogram.types.ContentTypes.PHOTO)
async def process_new_avatar(message: aiogram.types.Message):
    user_id = str(message.from_user.id)
    photo = message.photo[-1]
    photo_path = f"users_data/avatar_u{user_id}.png"

    await photo.download(photo_path)
    if os.path.isfile(photo_path):
        await bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ! –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –µ–≥–æ —É–≤–∏–¥–µ—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    else:
        await bot.send_message(user_id, '–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    dp.message_handlers.unregister(process_new_avatar)
@dp.message_handler(commands=['play'])
async def play_match(message: aiogram.types.Message):
    print(f'Play menu: {message.from_user.id}')
    if await check_subscription(message.from_user.id):
        return
    play_markup = aiogram.types.InlineKeyboardMarkup(row_width=1).add(aiogram.types.InlineKeyboardButton(text='‚öΩ –ò–≥—Ä–∞—Ç—å ‚öΩ', callback_data='start_play'))
    await bot.send_message(message.from_user.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∏–≥—Ä—ã –≤ –º–∞—Ç—á: 5000 –º–æ–Ω–µ—Ç\n–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–≥—Ä—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É (—Å –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –Ω–µ –Ω–∞–±–∏—Ä–∞—è –∫–æ–º–∞–Ω–¥—É /play –µ—â—ë —Ä–∞–∑)', reply_markup=play_markup)

@dp.callback_query_handler(lambda c: c.data == 'start_play')
async def start_play(callback_query: aiogram.types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, '–ù–∞—á–∞–ª–æ –º–∞—Ç—á–∞')
    print(f'Playing match: {callback_query.from_user.id}')
    if await check_subscription(callback_query.from_user.id):
        return
    player_id = callback_query.from_user.id
    cursor.execute("SELECT coins FROM data WHERE id=?", (player_id,))
    try:
        player_coins = cursor.fetchone()[0]
    except TypeError:
        await bot.send_message(player_id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ')
    if player_coins >= 5000:
        cursor.execute("UPDATE data SET coins=coins-5000 WHERE id=?", (player_id,))
        conn.commit()
        cursor.execute("SELECT info, id FROM data WHERE id != ? ORDER BY RANDOM() LIMIT 1", (player_id,))
        opponent_name, opponent_id = cursor.fetchone()
        player_score = random.randint(0, 7)
        opponent_score = random.randint(0, 7)
        await bot.send_message(callback_query.from_user.id, f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å\n–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_name if opponent_name == 'None' else f'–ò–≥—Ä–æ–∫ {opponent_id}'}")
        await asyncio.sleep(6)
        if player_score > opponent_score:
            cursor.execute("UPDATE data SET coins=coins+10000 WHERE id=?", (player_id,))
            conn.commit()
            await bot.send_message(callback_query.from_user.id, f"‚úÖ - –í—ã –ø–æ–±–µ–¥–∏–ª–∏ —Å–æ —Å—á—ë—Ç–æ–º {player_score}:{opponent_score}\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10000 –º–æ–Ω–µ—Ç")
        elif player_score < opponent_score:
            await bot.send_message(callback_query.from_user.id, f"‚ùå - –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å–æ —Å—á—ë—Ç–æ–º {player_score}:{opponent_score}")
        elif player_score == opponent_score:
            await bot.send_message(callback_query.from_user.id, f"üü® - –í—ã —Å—ã–≥—Ä–∞–ª–∏ –≤–Ω–∏—á—å—é —Å–æ —Å—á—ë—Ç–æ–º {player_score}:{opponent_score}")
    else:
        await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã\n–ù—É–∂–Ω–æ 5000")
        return

def update_json_batabase():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç"""
    cursor.execute('SELECT id, info, coins FROM data')
    rows = cursor.fetchall()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏
    users = {}
    for row in rows:
        users[str(row[0])] = {
            "info": row[1] if not row[0] == 'None' or not row[0] == None or not row[0] == '' else f"–ò–≥—Ä–æ–∫ {str(row[0])}",
            "coins": row[2]
        }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª JSON
    with open('users.json', 'w+') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

@dp.message_handler(commands=['leaderboard'])
async def get_leaderboard(call: aiogram.types.Message):
    if await check_subscription(call.from_user.id):
        return
    user_id = str(call.from_user.id)
    msg = await bot.send_message(call.from_user.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—å—Å—è...')
    update_json_batabase()
    with open('users.json', 'r', encoding='utf-8') as f:
        players_data = json.load(f)
    players = [
        {"id": player_id, "name": player_data["info"] if not player_data['info'] == None else f"–ò–≥—Ä–æ–∫ {player_id}", "success_rate": player_data['coins']}
        for player_id, player_data in players_data.items()]
    sorted_players = sorted(players, key=lambda x: x["success_rate"], reverse=True)[:10]
    fig, ax = plt.subplots()
    table_data = [["–ù–æ–º–µ—Ä", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ú–æ–Ω–µ—Ç—ã"]]

    for i, player in enumerate(sorted_players):
        table_data.append([i + 1, player["name"], round(player["success_rate"])])
    user_in_top_10 = False
    for i, player in enumerate(sorted_players):
        if player['id'] == str(call.from_user.id):
            user_in_top_10 = True
            break
    if not user_in_top_10:
        for i, player in enumerate(players):
            if player['id'] == str(call.from_user.id):
                table_data.append([i + 1, player["name"], round(player["success_rate"])])
                break
    table = ax.table(cellText=table_data, loc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(4)
    table.scale(1, 4)
    ax.axis('off')
    img = plt.imread('background.jpg')
    ax.imshow(img, extent=[0.0, 1.0, 0.0, 1.0], aspect='auto', alpha=0.3)
    fig.patch.set_facecolor('black')
    for cell in table.properties()['children']:
        cell.set_facecolor('white')
    channel = await bot.get_chat(config.CHANNEL_ID)
    channel_name = channel.full_name
    title = ax.set_title(f"–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –±–æ—Ç–∞ –æ—Ç {channel_name}", fontsize=18)
    title.set_color('white')
    cell_dict = table.get_celld()
    for i in range(len(table_data)):
        for j in range(len(table_data[0])):
            cell_dict[(i, j)].set_width(0.25)
            cell_dict[(i, j)].set_text_props(weight='bold')
            if i == 0:
                cell_dict[(i, j)].set_height(0.1)
            else:
                cell_dict[(i, j)].set_height(0.075)
    for i, player in enumerate(sorted_players):
        if player['id'] == str(call.from_user.id):
            user_in_top_10 = True
            if i < 11:
                for j in range(len(table_data[0])):
                    cell_dict[(i + 1, j)].set_text_props(weight='bold', fontsize=5)
                    cell_dict[(i + 1, j)].set_facecolor('lightblue')
                    cell_dict[(i + 1, j)].set_edgecolor('blue')
                    cell_dict[(i + 1, j)].set_linewidth(1.5)

            break
    if not user_in_top_10:
        for i, player in enumerate(players):
            if player['id'] == str(call.from_user.id):
                row_index = len(table_data) - 1
                for j in range(len(table_data[0])):
                    cell_dict[(row_index, j)].set_text_props(weight='bold', fontsize=5)
                    cell_dict[(row_index, j)].set_facecolor('lightblue')
                    cell_dict[(row_index, j)].set_edgecolor('blue')
                    cell_dict[(row_index, j)].set_linewidth(1.5)
                break

    now = datetime.datetime.now()
    formatted_date = now.strftime("%d-%m-%y_%H-%M")
    plt.savefig(f'leaderboards/{formatted_date}_u{call.from_user.id}.png', dpi=750)

    await bot.delete_message(chat_id=user_id, message_id=msg.message_id)
    with open(f'leaderboards/{formatted_date}_u{call.from_user.id}.png', 'rb') as photo:
        await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption='–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç')
    os.remove(f'leaderboards/{formatted_date}_u{call.from_user.id}.png')

@dp.message_handler(commands=['info'])
async def get_info(message):
    print(f'Getting info: {message.from_user.id}')
    if await check_subscription(message.from_user.id):
        return
    channel = await bot.get_chat(config.CHANNEL_ID)
    channel_name = channel.full_name
    channel_username = channel.username
    players = len(cursor.execute("SELECT * FROM data").fetchall())
    response = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –æ—Ç <a href="https://t.me/{channel_username}">{channel_name}</a>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {players}\n–ê–≤—Ç–æ—Ä: {config.ADMIN_NICKNAME}\n–î–ª—è —Å–≤—è–∑–∏: {str(", ").join(config.SUPPORT)}'
    await bot.send_message(message.from_user.id, response, parse_mode=aiogram.types.ParseMode.HTML)

@dp.message_handler(commands=['packs'])
async def packs_menu(message):
    print(f'Packs menu: {message.from_user.id}')
    if await check_subscription(message.from_user.id):
        return
    data = cursor.execute("SELECT coins, free_packs FROM data WHERE id=?", (message.from_user.id,)).fetchone()
    await bot.send_message(message.from_user.id, '''–ü–∞–∫–∏:

–í –¥–µ–Ω—å –≤–∞–º –¥–∞—ë—Ç—Å—è –ø–∞–∫ 85+

–ó–æ–ª–æ—Ç–æ–π –ø—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä:
3 –∏–≥—Ä–æ–∫–∞ 5.000 –º–æ–Ω–µ—Ç

–ë–æ–ª—å—à–æ–π –∑–æ–ª–æ—Ç–æ–π –Ω–∞–±–æ—Ä:
7 –∏–≥—Ä–æ–∫–æ–≤ 10.000 –º–æ–Ω–µ—Ç

–†–µ–¥–∫–∏–π –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤:
15 –∏–≥—Ä–æ–∫–æ–≤ 15.000 –º–æ–Ω–µ—Ç

–ë–æ–ª—å—à–æ–π –ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤:
20 –∏–≥—Ä–æ–∫–æ–≤ 26.000 –º–æ–Ω–µ—Ç

–ù–∞–±–æ—Ä —É–ª—å—Ç–∏–º–µ–π—Ç:
50.000 –º–æ–Ω–µ—Ç = 35 –∏–≥—Ä–æ–∫–æ–≤''', reply_markup=aiogram.types.InlineKeyboardMarkup(row_width=1).add(
        aiogram.types.InlineKeyboardButton(text=f'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫ ({data[1]} –æ—Å—Ç–∞–ª–æ—Å—å)', callback_data='free_pack'),
          aiogram.types.InlineKeyboardButton(text='–ó–æ–ª–æ—Ç–æ–π –ø—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä', callback_data='gold_pack'),
            aiogram.types.InlineKeyboardButton(text='–ë–æ–ª—å—à–æ–π –∑–æ–ª–æ—Ç–æ–π –Ω–∞–±–æ—Ä', callback_data='big_gold_pack'),
              aiogram.types.InlineKeyboardButton(text='–†–µ–¥–∫–∏–π –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤', callback_data='rare_pack'),
                aiogram.types.InlineKeyboardButton(text='–ë–æ–ª—å—à–æ–π –ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤', callback_data='big_pack'),
                aiogram.types.InlineKeyboardButton(text='–ù–∞–±–æ—Ä —É–ª—å—Ç–∏–º–µ–π—Ç', callback_data='ultimate_pack')))

@dp.callback_query_handler(lambda c: c.data in ['free_pack', 'gold_pack', 'big_gold_pack', 'rare_pack', 'big_pack', 'ultimate_pack'])
async def process_buy_pack(callback_query: aiogram.types.CallbackQuery):
    print(f'Opening pack: {callback_query.from_user.id}')
    if await check_subscription(callback_query.from_user.id):
        return
    
    response = ""
    user_id = callback_query.from_user.id
    data = cursor.execute("SELECT coins, free_packs FROM data WHERE id=?", (user_id,)).fetchone()
    pack_cost = 0
    pack_size = 0
    is_free_pack = False
    if callback_query.data == 'free_pack':
        pack_size = 1
        if data[1] <= 0:
            await bot.send_message(user_id, '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–∞–∫–∏, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞')
            return
        is_free_pack = True
    elif callback_query.data == 'gold_pack':
        pack_cost = 5000
        pack_size = 3
    elif callback_query.data == 'big_gold_pack':
        pack_cost = 10000
        pack_size = 7
    elif callback_query.data == 'rare_pack':
        pack_cost = 15000
        pack_size = 15
    elif callback_query.data == 'big_pack':
        pack_cost = 20000
        pack_size = 20
    elif callback_query.data == 'ultimate_pack':
        pack_cost = 50000
        pack_size = 35

    msg = await bot.send_message(user_id, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...')
    await bot.delete_message(user_id, message_id=msg.message_id)
    if int(data[0]) < pack_cost:
        response = f'–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–∫–∞\n–ù—É–∂–Ω–æ {pack_cost}'
    else:
        if is_free_pack:
            cursor.execute("UPDATE data SET free_packs=? WHERE id=?", (0, user_id))
        else:
            cursor.execute("UPDATE data SET coins=? WHERE id=?", (data[0] - pack_cost, user_id))
        conn.commit()
        cards = get_random_cards(pack_size)
        for card in cards:
            with open(f'Cards/{card}', 'rb') as current_card:
                await bot.send_document(user_id, document=current_card, caption='–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–≥—Ä–æ–∫–∞')
                await asyncio.sleep(0.1)

if __name__ == '__main__':
    aiogram.executor.start_polling(dp, on_startup=init_bot)

